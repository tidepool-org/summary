// Package Summary provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Summary

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"strings"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xacW/buJL/KgRvgSZZ2ZbdJtv4n7tsu9dXbNv01uk73MY+hJbGFncpUiUpJ75ugPch",
	"3id8n+QwpCRTtuwmbe9wByxQNLJEDoczP878OOQnmqi8UBKkNXT8iZokg5y5x38rmbRcAD6zNOWWK8nE",
	"e60K0JaDoeMFEwYimoJJNC/wOx3TC/Kx6kjUghiWFwJMn5DLuQG9AmIzZonNgCSqlJZwQ1ThRfcJmagc",
	"ppJjnxykZfiB5GxNpLIkZ1xaxiWBO5ZY39/0p5JGtAi0wimV0uJDW7OrDIgs8zlo1GzFRAmGzEGoW6eP",
	"zTSYTInUf+rTiNp1AXRMubSwBE3vIypZDnsks9zNGEXVFghkGKu5XKKIAnSCc1vuEbT5HhjwsJ4LpXNm",
	"6ZguhGKWRjRndzwvczoexnFEcy79r7hRx9sB1WnEdWuzGa1jbgfHPTzwfUQ1fCy5hpSOr71dQ2VadppF",
	"1HKLUNygspGo5r9BgoPf9eDOWwunUj0HeBjV7qMr0Os36rY9yDjux+fno5ZFTp/do6aTMs+ZXr8HzVX6",
	"gPWwYKVAAN5vL45KEEk5m4MFQwxi3FieGJKDZSmzbAfOAuTSZvj0HU/pmP7TYPN9UDidwjel5NbQQA1K",
	"ow7Heqm1V70Y9ClIdNg1TdmaRvQW4Hc0/8ay18272iXeLKQedwfwxjK9Zzm6TyRlFtqKkDlwuSQaCqUt",
	"pC2sYeue5Tl0jVUW+Hkflnm+iT8GQuPfggYimLGkkkAWSjuFlnwFMrDPQ/TYAnflwNoSGy0DI9bI6AbE",
	"g6DeG4Zo8W5qrE9H8SjuxWe90fOrOB67f78GqtQNfujFp9hg6BuE8P/FeeN/CP47qC+axfadhoWD/SZV",
	"Dao8NWivTA82n8ke0GuyGX3bZdXotbyDjnqcfzbz+saeCuZeB7x4eBbRHJjEgPxDROvYjcv4K8NiFIyy",
	"kSB2eg/jfjw8f97q/jxudR8Om/4ZX2ZbAs7P+z+ctocfbgs4a03hL7tCXBoMJIxO4/tZRH3IGtN8OUgF",
	"Yj0E+8cSzFehvRJBGDFgMb6hjmmTQJEU1cQheEvefphcES4TUabgIhA2MGMybSY3pRGZOlv5J6Fu/UPl",
	"wCntk0ubgd6VffEfZA6k0GrFU0j7pIM9BSD5RLmF3HzWCG0B34AjPZiUOArUxOrQtBdCNOQpL43FeXeR",
	"KKvwS2XvlHC5IaedFOeRPGa2HRzumxdMa7Z2ScvD8HDMco16qoTfdgatM+/Gcx3xSleA7tCngbwplDTw",
	"NZi/IKYar3JzrowlGnAlbsI+ZjXntGZplAa06ZMdMLLE8hW36z3sp/kcBRq/9pjdVvZ6dlDZ24wnGUlh",
	"xROo+EBpICVMpuQ2A4lAKQuhWNqeB40euEi2x/bkhijpxbNArFOC3DITmk+snUK7ux3BYd92x38jRi3s",
	"LdMV+alX/848vmQZb4/gbGYVgTurcZeGbWrxzFrQKOQ/r1nvvy56v8a989nRH5sfvdmnODob3gefj4+m",
	"0/4jmh9//x3dgP/Flnb18tzZkwlmcaXvYal197qZdxripcsE6DddYmANWXPOkssJGcb94Wn/WbhAt3Vs",
	"dOnSU/MVs84tdfe3h1iiZUvjybxldHYfYYYwbmJd86w+fp1rj+I/roe989l0mp4cT6f9g7+PeuHPP/C/",
	"ypm92XXcO6+fTxwMHtr2+OT4n4+m0+/Dt987HIUvsNUhrNSm6mL3dZ+X9QratlXBkt+ReTyKGlYc5oqn",
	"UCglyAcXbkDTEKBbQApcSof90dP+M8/ZfQz5mlCOiKgiUe35KnJ8JnD4Tm+ZLBcssaUGbXbxdiGJy3+u",
	"xuEMSxCshMuUJ8y635g+AilH5riGph+iP5VT+VoSpVPQqB9bKZ6SRMlF6YCswZTCyVpolRMNC9B+KIWp",
	"h8ulaA9BbrnNSK58qJRESR8z/vG3v2O6qrwVkRL7krmyGXnylkueQ/rEZYonbyG1WkmePCFcWtBJxuQS",
	"2Fys//G3v98CqmQ1r1ZPlfz8/E1jZqcnPoSqGXxRdxLc4B6VzdUK3LggF0onQE5cbeykNmnObJKBIUee",
	"3+CrhKHux852Nx2uuiHcEBZ4B22gtDdKJXZK0VdTSuaQsNI4mqqBIPDrBLplekYSJQSbK+1renOwtwBy",
	"y9ThfCNiyiQjzLhJXzGZQk5ePSNcmlJwSYoyL7y7Xrx662y9rGQf7Rvsxku5cRa7eQl3icpvjvthBt9l",
	"oltcrbKYSkF0gLo2EE9BWr5YNzDG9h3gxTV2E4j0xidSyR7khV03SwPzNshEpWDaAith5N+BgEyBrVSF",
	"HJtkBFiStYz6xG25Zcq0L3Bkng4jOyw0GAxhXrJL8ciFQecGx/GwiZCruJ1FwbQ19Yxca/R+IwbBaZxP",
	"b5VOET/2VkUEbNLJ9/0sJqA5E+88s95vXGeH2rK+J87Lda4KvNvGDSVXNt5n2ZacLZeRd8pWJApWIAlf",
	"ENaOH0p6mmZIypfcYjwj+Kcl1URO6OQdMZkqRYobEGOV9kZrVNOwZDoVYIybzgfJP5Ygwoi54CBSU+9Z",
	"mrxRRW3Hsp07TdRtiJOcrU9wdCZJiLc+ucq4QTuBQW9yJsTareG80CrnBsYkY6u2D7Ysh53vrIYcVeY5",
	"cl0mLTkCU0DiBbqQ2l/2I0yfkidMEGPLlIM5JvPS4rxwc09ugSQOYYlWxhBVarLg2lgEJSAikXQBOUmY",
	"lMqeIF9WK9Cfc6d35BIkaFfxq/nMmPjQQF6deht62u9jc2Nkm2lVLjNyURQCCL+cPDHkL8CEzX7mNoxH",
	"BwB/5ejZF6bGRSkT7NGdFgPw4yg3lcgN4BaMa7EmBsSiB3eFYJJZpdcOgYECDxiZuWDAk1Iw3ayUfw3T",
	"JXZ6jXEbLLnMJX+v0iaOpyD4CvSamLWxkJOsivhu4Jv5sg7XVfsexv0bzN2Jr468f/kWseZyMZPt9JAo",
	"abUSArSTUW3ycYnNSy5sj0syF0qlZCnKRBkMq5JbpVspgcn15cIVzOrS+HyJ5Dxx/4dq0dn9LPpcCgnY",
	"o+d35KWnah0bcwwy9nOFgQ+uLviTaxpK/8VvuqtBLjY75d16xMEepCoP0N1k6LewHRCebPbV1d6/tjCX",
	"vqJSLYzGyg8o11b1512FfR3XxQ/fFIloR5kFY0HakeW3yin1rJoendWUqlbyKIK/qWZch/v2b8X7Q9bf",
	"ScKv6Y9sDZrO6pbv/MgXJgFpOCMvlLQYXt/BnSWXEmh3aqbD0dNnp2ctiLqTkKA2fXYVPx+Pzsfx6Ncg",
	"AOZztPcsgM71w0vidcX7UEl8OAzG7aiJD5+fxU1NfBh/cU18GP9wur8m/iw+UBIf9Yen8en+ivjw+ejp",
	"wYp43H82Ojs7UBJvSdhTEu+SsqcsHv15avF/+dRiFp5bBGda/0sHdftuWyjb4l11LZ6Hh6kdFwSCyxYe",
	"A9uC3wKTTTpxPG9HdFDVCVvTjusPrdOO/TysudOSAzOldrdTzIMTWHNp4RsV/7/VWeSfK+4LzwkjGrKu",
	"ryyyhdcSqrtRwQmAv5TwqAKcT8WdBybVfYXP3A1xGnUc4PiNUH+rst1E/vhq+Gw8il3qne27KVFB9w1O",
	"q2KaV3suc/gX3fPAT5+dh9u9YVNvWTRnvZcLr7o4VhLRZL7cvurivsy2GTuk5CVKvvJKHGaTlaZu+rOd",
	"+burL+35P2ThPoZs1THGh4/xZhuT50oM3mAUxgeBD8tB+qb6K0Jtf3S7pFdV0P3QedOn47wBszskpeZ2",
	"PcFI5mcyB6ZBX6nfQTZXDlGOf7+Rm1lbOIIAegV6AokGt9Y4ujeDiiFXC/quZyv63PPte8Z32ETcgv8M",
	"ay/QIHNuNPi8QNe+Z12HHYFBEMdn3OH44CotS5zGkDMu0FJlgaz3X2rJfaWXmxEv3r8mE98CiZMWlQ3M",
	"eDCoevbDngO6N2+jCfyeUnCk9hBsM36cvCSj3gvhCrdTOuF5IfiCQzql5E3Venv4JbdZOe8nKh80VkEN",
	"6u3JYC7UfJAzY0EP3rx+8dO7yU9uBYPOzeViUqmzEZjCCgSu5vaMXPueWvRKAwO6k+i2dj0xDqEKkKzg",
	"dEyf9uN+7A+jMge0wWo48JUlM/jkH3h6PzDNHnH8iRZMsxys3x5VUEABG7fUHWm4rq0uIapuy3btKGcR",
	"LZTpoEW/gC21bA6eg+2wPxAXghTM4s7Q+NqKH566ifqC0muMhq/A/nX4wk/O/eHpxkjVWf+PKl3XSKzz",
	"VFEIV8pRcvCbUZsFyB68CffXCPxlmXob7Ew5iuNHjfa4vX+1396tp+wsgsufaRh5nF/bS/7aFWoqH3in",
	"aA4rIA00DjsDxSO43K2FwSdfJqiBtX4YrKrawrcCVah/C1Y7yHmvjP3r8AOq/sHp8P8NN4+Cyx543N83",
	"icV7aBPvxoOBUAkTmTJ2/DSO4x1q0XymSC/bkfIjG/ar4IZ7hP5WqG8L+siGnSJGjxEx6hARlp/hzoKW",
	"TByWE/TokMcKfrh7oVVaJr438gbPA5qcYxqIbZG0uuRVY/B+dv/fAQAA//9if6a/kzAAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

