// Package Summary provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"strings"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

